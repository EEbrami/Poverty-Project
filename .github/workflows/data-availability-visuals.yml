name: Data Availability Visuals

on:
  push:
    branches:
      - 'copilot/**'
      - main
    paths:
      - '.github/workflows/data-availability-visuals.yml'
  
  workflow_dispatch:
    inputs:
      csv_path:
        description: 'Path to the input CSV within the repo (e.g., xlsxConverted/csvFiles/dart-med-pop_decomp-dhi.csv)'
        required: true
        type: string
        default: 'xlsxConverted/csvFiles/dart-med-pop_decomp-dhi.csv'
      start_year:
        description: 'Clip to years >= start_year (optional)'
        required: false
        type: string
        default: ''
      end_year:
        description: 'Clip to years <= end_year (optional)'
        required: false
        type: string
        default: ''
      tick_interval:
        description: 'Tick mark spacing for x-axis (default: 5)'
        required: false
        type: string
        default: '5'
      glyph:
        description: 'Character to render for available data (default: #)'
        required: false
        type: string
        default: '#' 
      include_universal:
        description: 'Include Universal row (default: true)'
        required: false
        type: string
        default: 'true'
      visualization_mode: # Required for gridline control in the Python script
        description: 'Defines the visual grid style for text/md output (e.g., minimal-ticks, vertical-grid-5yr, vertical-grid-1yr)'
        required: true
        type: string
        default: 'vertical-grid-5yr' 
      output_format: # Controls which file types are generated
        description: 'Output format(s) to generate (comma-separated: text, png, pdf, svg, etc.)'
        required: true
        type: string
        default: 'text,md,png' # Defaulting to text, markdown, and image
        
jobs:
  generate-visuals:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install core data libs + visualization libraries for PNG/PDF support
          pip install pandas numpy matplotlib seaborn

      - name: Generate visualizations
        run: |
          set -eux
          
          # --- Determine CSV Path (Prevents 'push' trigger errors) ---
          CSV_PATH="${{ github.event.inputs.csv_path }}"
          if [ -z "$CSV_PATH" ]; then
            CSV_PATH="xlsxConverted/csvFiles/dart-med-pop_decomp-dhi.csv" 
          fi
          # --- END CRITICAL FIX ---

          # Build the command with new required arguments
          CMD="python analysis/data-availability/visuals/generate_visuals.py --csv-path $CSV_PATH --visualization-mode ${{ github.event.inputs.visualization_mode }} --output-format ${{ github.event.inputs.output_format }}"
          
          # Add optional arguments if provided
          if [ -n "${{ github.event.inputs.start_year }}" ]; then
            CMD="$CMD --start-year ${{ github.event.inputs.start_year }}"
          fi
          
          if [ -n "${{ github.event.inputs.end_year }}" ]; then
            CMD="$CMD --end-year ${{ github.event.inputs.end_year }}"
          fi
          
          if [ -n "${{ github.event.inputs.tick_interval }}" ]; then
            CMD="$CMD --tick-interval ${{ github.event.inputs.tick_interval }}"
          fi
          
          if [ -n "${{ github.event.inputs.glyph }}" ]; then
            CMD="$CMD --glyph \"${{ github.event.inputs.glyph }}\""
          fi
          
          if [ -n "${{ github.event.inputs.include_universal }}" ]; then
            CMD="$CMD --include-universal ${{ github.event.inputs.include_universal }}"
          fi
          
          # Execute the command
          eval $CMD

      - name: Commit and push visualization outputs
        run: |
          set -eux
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # General Fix: Add ALL generated files from the visuals directory.
          # This makes the .yml fully independent of the file extensions in the .py script.
          git add analysis/data-availability/visuals/* || true 
          
          if ! git diff --cached --quiet; then
            git commit -m "Add data availability visualizations for ${{ github.event.inputs.csv_path }}"
            git push
          else
            echo "No changes to commit."
          fi

name: Data Availability Visuals

on:
  push:
    branches:
      - '**' # General trigger: Runs on push to any branch for visibility and testing.
    paths:
      - '.github/workflows/data-availability-visuals.yml'
  
  workflow_dispatch:
    inputs:
      csv_path:
        description: 'Path to the input CSV within the repo (e.g., xlsxConverted/csvFiles/dart-med-pop_decomp-dhi.csv)'
        required: true
        type: string
        default: 'xlsxConverted/csvFiles/dart-med-pop_decomp-dhi.csv'
      start_year:
        description: 'Clip to years >= start_year (optional)'
        required: false
        type: string
        default: ''
      end_year:
        description: 'Clip to years <= end_year (optional)'
        required: false
        type: string
        default: ''
      tick_interval:
        description: 'Tick mark spacing for x-axis (default: 5)'
        required: false
        type: string
        default: '5'
      glyph:
        description: 'Character to render for available data (default: #)'
        required: false
        type: string
        default: '#' 
      include_universal:
        description: 'Include Universal row showing full availability (default: true)'
        required: false
        type: string
        default: 'true'
      visualization_mode:
        description: 'Defines the visual grid style (e.g., vertical-grid-5yr, alt-row-shading)'
        required: true
        type: string
        default: 'vertical-grid-5yr' 
      output_format:
        description: 'Output format(s) to generate'
        required: true
        type: choice
        default: 'png'
        options:
        - png
        - pdf
        - png,pdf

jobs:
  generate-visuals:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Installing packages for image generation (PNG/PDF) and data handling
          pip install pandas numpy matplotlib seaborn

      - name: Generate visualizations
        run: |
          set -eux
          
          # CRITICAL FIX: Determine CSV Path based on trigger (prevents errors on push)
          CSV_PATH="${{ github.event.inputs.csv_path }}"
          if [ -z "$CSV_PATH" ]; then
            CSV_PATH="xlsxConverted/csvFiles/dart-med-pop_decomp-dhi.csv" 
          fi

          # Start CMD with the mandatory CSV Path
          CMD="python analysis/data-availability/generate_visuals.py --csv-path $CSV_PATH"
          
          # Conditionally add ALL optional arguments IF they have a value
          if [ -n "${{ github.event.inputs.start_year }}" ]; then
            CMD="$CMD --start-year ${{ github.event.inputs.start_year }}"
          fi
          if [ -n "${{ github.event.inputs.end_year }}" ]; then
            CMD="$CMD --end-year ${{ github.event.inputs.end_year }}"
          fi
          if [ -n "${{ github.event.inputs.tick_interval }}" ]; then
            CMD="$CMD --tick-interval ${{ github.event.inputs.tick_interval }}"
          fi
          if [ -n "${{ github.event.inputs.glyph }}" ]; then
            CMD="$CMD --glyph \"${{ github.event.inputs.glyph }}\""
          fi
          if [ -n "${{ github.event.inputs.include_universal }}" ]; then
            CMD="$CMD --include-universal ${{ github.event.inputs.include_universal }}"
          fi
          if [ -n "${{ github.event.inputs.visualization_mode }}" ]; then
            CMD="$CMD --visualization-mode ${{ github.event.inputs.visualization_mode }}"
          fi
          if [ -n "${{ github.event.inputs.output_format }}" ]; then
            CMD="$CMD --output-format ${{ github.event.inputs.output_format }}"
          fi
          
          # Execute the command
          eval $CMD

      - name: Commit and push visualization outputs (CRITICAL FIX)
        run: |
          set -eux
          
          # Set Git credentials for the bot
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # General Fix: Add ALL generated files from the visuals directory.
          git add analysis/data-availability/visuals/* || true 
          
          if ! git diff --cached --quiet; then
            # Commit the local changes
            git commit -m "Update generated visualizations for ${{ github.event.inputs.csv_path }}"
            
            # CRITICAL FIX: Force push with lease to overwrite generated artifacts 
            # and avoid the non-fast-forward conflict on binary files.
            git push origin ${{ github.ref_name }} --force-with-lease
          else
            echo "No changes to commit."
          fi
